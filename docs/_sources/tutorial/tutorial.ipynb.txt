{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tutorial"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div id='automatic_differentiation'/>\n",
    "\n",
    "## Automatic Differentiation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Fundamental of automatic differentiation [(AD)](https://en.wikipedia.org/wiki/Automatic_differentiation) is the decomposition of differentials based on the chain rule. Qualia implements the reverse accumulation AD in `qualia2.autograd`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*] GPU acceleration enabled.\n",
      "-----------------------------------------------------------------------\n",
      "nvcc: NVIDIA (R) Cuda compiler driver\n",
      "Copyright (c) 2005-2019 NVIDIA Corporation\n",
      "Built on Fri_Feb__8_19:08:17_PST_2019\n",
      "Cuda compilation tools, release 10.1, V10.1.105\n",
      "\n",
      "-----------------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "import qualia2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Qualia uses the so called “Define-by-Run” scheme, so forward computation itself defines the computational graph. By using a Tensor object, Qualia can keep track of every operation. Here, the resulting y is also a Tensor object, which points to its creator(s)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[16.] shape=(1,)\n"
     ]
    }
   ],
   "source": [
    "x = qualia2.array([5])\n",
    "y = x**2 - 2*x + 1\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "At this moment we can compute the derivative."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[8.]\n"
     ]
    }
   ],
   "source": [
    "y.backward()\n",
    "print(x.grad)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that this meets the result of symbolic differentiation.\n",
    "<p align=\"center\">\n",
    "<a href=\"https://www.codecogs.com/eqnedit.php?latex=\\frac{\\mathrm{d}&space;y}{\\mathrm{d}&space;x}&space;=&space;2x&space;-2\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\frac{\\mathrm{d}&space;y}{\\mathrm{d}&space;x}&space;=&space;2x&space;-2\" title=\"\\frac{\\mathrm{d} y}{\\mathrm{d} x} = 2x -2\" /></a>\n",
    "</p>\n",
    "<p align=\"center\">\n",
    "<a href=\"https://www.codecogs.com/eqnedit.php?latex=\\therefore&space;y'(5)&space;=&space;8\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\therefore&space;y'(5)&space;=&space;8\" title=\"\\therefore y'(5) = 8\" /></a>\n",
    "</p>\n",
    "\n",
    "All these computations can be generalized to a multidimensional tensor input. When the output is not a scalar quantity, a tenspr  with the same dimentions as the output that is filled with ones will be given by default to start backward computation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0.  2.  4.]\n",
      " [ 6.  8. 10.]]\n"
     ]
    }
   ],
   "source": [
    "x = qualia2.array([[1, 2, 3], [4, 5, 6]])\n",
    "y = x**2 - 2*x + 1\n",
    "y.backward()\n",
    "print(x.grad)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With the autograd feature of Qualia, one can plot the derivative curve of a given function very easily. For instance, let function of interest be `y = x*sin(x)`. Note that the qualia array needs to be converted to numpy array before the plot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from qualia2.functions import sin\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "x = qualia2.arange(-2*qualia2.pi,2*qualia2.pi,0.01)\n",
    "y = x * sin(x)\n",
    "y.backward()\n",
    "\n",
    "plt.plot(x.asnumpy(), y.asnumpy(), label='y = x*sin(x)')\n",
    "plt.plot(x.asnumpy(), x.gradasnumpy(), label='dy/dx')\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.legend(loc='upper left')\n",
    "plt.grid()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div id='valid_automatic_differentiation'/>\n",
    "\n",
    "## Validation of Automatic Differentiation "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One can use `util.check_function()` to validate the gradient caluclation of a function. `util.check_function()` internally calculates the gradient using numerical method and compares the result with automatic differentiation. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*] measured error:  7.808416552423754e-18\n"
     ]
    }
   ],
   "source": [
    "from qualia2.functions import *\n",
    "from qualia2.util import check_function\n",
    "\n",
    "check_function(sinc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One can specify the domain to avoid null value for the function that has not defined region."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*] measured error:  1.0834724541670098e-12\n"
     ]
    }
   ],
   "source": [
    "check_function(tan, domain=(-np.pi/4, np.pi/4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div id='qualia_tensor'/>\n",
    "\n",
    "## Qualia Tensor"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Every tensor calculation and automatic differentiation are done by the `Tensor` onject in Qualia. `Tensor` onject wraps `ndarray` objects along the `creator` onject to perform automatic differentiation. A computational graph for a differentiation is defined dynamically as program runs. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'qualia2.autograd.Tensor'>\n",
      "[[1. 2. 3.]\n",
      " [4. 5. 6.]] shape=(2, 3)\n"
     ]
    }
   ],
   "source": [
    "x = qualia2.array([[1, 2, 3], [4, 5, 6]])\n",
    "print(type(x))\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The gradient for a `Tensor` can be optionally replaced by a new gradient, which is additionally calculated by a hooked function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1. 1. 1. 1. 1. 1.]\n",
      " [1. 1. 1. 1. 1. 1.]\n",
      " [1. 1. 1. 1. 1. 1.]\n",
      " [1. 1. 1. 1. 1. 1.]\n",
      " [1. 1. 1. 1. 1. 1.]]\n"
     ]
    }
   ],
   "source": [
    "a = qualia2.rand(5,6)\n",
    "a.backward()\n",
    "print(a.grad)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If `lambda grad: 2*grad` is registered as a hook, the gradient will be doubled."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[2. 2. 2. 2. 2. 2.]\n",
      " [2. 2. 2. 2. 2. 2.]\n",
      " [2. 2. 2. 2. 2. 2.]\n",
      " [2. 2. 2. 2. 2. 2.]\n",
      " [2. 2. 2. 2. 2. 2.]]\n"
     ]
    }
   ],
   "source": [
    "a = qualia2.rand(5,6)\n",
    "a.register_hook(lambda grad: 2*grad)\n",
    "a.backward()\n",
    "print(a.grad)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div id='numpy_conversion'/>\n",
    "\n",
    "## Tensor-Numpy Conversion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Numpy `ndarray` can be used to create the `Tensor`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'qualia2.autograd.Tensor'>\n",
      "[[ 0.  1.  2.  3.  4.  5.]\n",
      " [ 6.  7.  8.  9. 10. 11.]\n",
      " [12. 13. 14. 15. 16. 17.]] shape=(3, 6)\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "n = np.arange(18).reshape(3,6)\n",
    "a = qualia2.autograd.Tensor(n)\n",
    "\n",
    "print(type(a))\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`Tensor` can be easily converted to numpy `ndarray` by using `Tensor.asnumpy()`.\n",
    "Note that resulting `ndarray` does not carry any of the gradient information. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'numpy.ndarray'>\n",
      "[[ 0.  1.  2.  3.  4.  5.]\n",
      " [ 6.  7.  8.  9. 10. 11.]\n",
      " [12. 13. 14. 15. 16. 17.]]\n"
     ]
    }
   ],
   "source": [
    "b = a.asnumpy()\n",
    "\n",
    "print(type(b))\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div id='computational_graph'/>\n",
    "\n",
    "## Computational Graph"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you want to detach the computation from the current graph, you can use `Tensor.detach()` method. This will clear the `creator` object in the `Tensor` and prevents backward propagation to be computed further."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.76790906 0.71244082 0.83183156 0.96897591 0.64806117 0.75165602]\n",
      " [0.82414905 0.58799685 0.96589815 0.67495328 0.95247465 0.93182726]\n",
      " [0.89724121 0.98999407 0.77401058 0.99550057 0.98964091 0.80678068]\n",
      " [0.98992852 0.69552181 0.73793413 0.99660953 0.63206233 0.60313844]\n",
      " [0.59003014 0.81016324 0.84843595 0.616491   0.74049448 0.92092612]]\n"
     ]
    }
   ],
   "source": [
    "from qualia2.functions import *\n",
    "\n",
    "a = qualia2.rand(5,6)\n",
    "b = sin(a)\n",
    "\n",
    "b.backward()\n",
    "print(a.grad)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n"
     ]
    }
   ],
   "source": [
    "a = qualia2.rand(5,6)\n",
    "b = sin(a).detach()\n",
    "\n",
    "b.backward()\n",
    "print(a.grad)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div id='network_definition'/>\n",
    "\n",
    "## Network Definition"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In order to define a network, `nn.Module` needs to be inherited. Note that a user-defined model must have `super().__init__()` in the `__init__` of the model. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import qualia2.nn as nn\n",
    "import qualia2.functions as F\n",
    "\n",
    "class Model(nn.Module):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.conv1 = nn.Conv2d(1, 10, kernel_size=5)\n",
    "        self.conv2 = nn.Conv2d(10, 20, kernel_size=5)\n",
    "        self.fc1 = nn.Linear(500, 50)\n",
    "        self.fc2 = nn.Linear(50, 10)\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = F.relu(F.maxpool2d(self.conv1(x), (2,2)))\n",
    "        x = F.relu(F.maxpool2d(self.conv2(x), (2,2)))\n",
    "        x = F.reshape(x,(-1, 500))\n",
    "        x = F.relu(self.fc1(x))\n",
    "        x = self.fc2(x)\n",
    "        return x\n",
    "    \n",
    "model = Model()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If the model is sequential, there is also an option to use `nn.Sequential`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = nn.Sequential(\n",
    "    nn.Conv2d(1, 10, kernel_size=5),\n",
    "    nn.MaxPool2d((2,2)),\n",
    "    nn.ReLU(),\n",
    "    nn.Conv2d(10, 20, kernel_size=5),\n",
    "    nn.MaxPool2d((2,2)),\n",
    "    nn.ReLU(),\n",
    "    nn.Flatten(),\n",
    "    nn.Linear(500, 50),\n",
    "    nn.ReLU(),\n",
    "    nn.Linear(50, 10),\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div id='model_summary'/>\n",
    "\n",
    "## Model Summary"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Having a visualization of the model is very helpful while debugging your network. You can obtain a network summary by `your_model.summary(input_shape)`. Note that the `input_size` is required to make a forward pass through the network."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "----------------------------------------------------------------------------\n",
      "                                Model: Model                                \n",
      "----------------------------------------------------------------------------\n",
      "| layers              |    input shape     |    output shape    | params # |\n",
      "============================================================================\n",
      "| Conv2d-0            |   (1, 1, 28, 28)   |  (1, 10, 26, 26)   |   260    |\n",
      "| Conv2d-1            |  (1, 10, 13, 13)   |  (1, 20, 11, 11)   |   5020   |\n",
      "| Linear-2            |      (1, 500)      |      (1, 50)       |  25050   |\n",
      "| Linear-3            |      (1, 50)       |      (1, 10)       |   510    |\n",
      "============================================================================\n",
      "total params: 30840\n",
      "training mode: True\n",
      "----------------------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "model = Model()\n",
    "model.summary((1, 1, 28, 28))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div id='save_load'/>\n",
    "\n",
    "## Saving/Loading a Trained Weights"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In order to save the trained weights of a model, one can simply use `Module.save(filename)` method. The weights are saved in pickle format with `.qla` extension. To load the saved weights, use `Module.load(filename)` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.save('tutorial_weights')\n",
    "model.load('tutorial_weights')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div id='optim_setup'/>\n",
    "\n",
    "## Setting up an Optimizer"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Optimizers require the model parameters. Put `Module.params` as the first argument for the optimizer. Other arguments such as learning rate are optional. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "from qualia2.nn.optim import SGD\n",
    "\n",
    "optim = SGD(model.params)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Following optimizers are available now:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* SGD (Momentum)\n",
    "* Adagrad\n",
    "* Adadelta\n",
    "* RMSProp\n",
    "* Adam\n",
    "* AdaMax\n",
    "* Nadam\n",
    "* RAdam\n",
    "* NovoGrad"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can gat the default parameters as:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'lr': 0.001, 'momentum': 0, 'weight_decay': 0}"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "optim.defaults"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can change the parameters by passing the dictionary:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "optim.load_settings({'lr':0.01, 'momentum': 0.1, 'weight_decay': 0.9})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div id='dataloader'/>\n",
    "\n",
    "## Dataloader"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Dataloader is the user friendly class that helps the preprocess of data for training, testing, and visualization purpose. One can create the customized `DatalLoader` by just defining: \n",
    "    \n",
    "* self.train_data\n",
    "* self.train_label\n",
    "* self.test_data\n",
    "* self.test_label \n",
    "\n",
    "Note that if you do not have some of the properties above, you can leave it as None.\n",
    "Also, if you need to visualize the data, overrite `DataLoader.show()` method. \n",
    "\n",
    "Here is the example of creating a spiral data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "from qualia2.data.dataloader import DataLoader\n",
    "\n",
    "class Spiral(DataLoader):\n",
    "    '''Spiral Dataset\\n\n",
    "    Args:\n",
    "        num_class (int): number of classes\n",
    "        num_data (int): number of data for each classes\n",
    "\n",
    "    Shape:\n",
    "        - data: [num_class*num_data, 2]\n",
    "        - label: [num_class*num_data, num_class]\n",
    "    '''\n",
    "    def __init__(self, num_class=3, num_data=100):\n",
    "        super().__init__()\n",
    "        self.num_class = num_class\n",
    "        self.num_data = num_data\n",
    "        self.train_data = np.zeros((num_data*num_class, 2))\n",
    "        self.train_label = np.zeros((num_data*num_class, num_class))\n",
    "\n",
    "        for c in range(num_class):\n",
    "            for i in range(num_data):\n",
    "                rate = i / num_data\n",
    "                radius = 1.0*rate\n",
    "                theta = c*4.0 + 4.0*rate + np.random.randn()*0.2\n",
    "                self.train_data[num_data*c+i,0] = radius*np.sin(theta)\n",
    "                self.train_data[num_data*c+i,1] = radius*np.cos(theta)\n",
    "                self.train_label[num_data*c+i,c] = 1\n",
    "    \n",
    "    def show(self, label=None):\n",
    "        fig, ax = plt.subplots()\n",
    "        for c in range(self.num_class):\n",
    "            ax.scatter(self.train_data[(self.train_label[:,c]>0)][:,0],self.train_data[(self.train_label[:,c]>0)][:,1])\n",
    "        plt.xlim(-1,1)\n",
    "        plt.ylim(-1,1)\n",
    "        plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's visualize the spiral data we just created. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*] preparing data...\n",
      "    this might take few minutes.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data = Spiral()\n",
    "data.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`DataLoader` yields shuffuled mini-batch data for every iteration. Batch size can be set as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(100, 2)\n"
     ]
    }
   ],
   "source": [
    "data.batch = 100\n",
    "feat, label = next(data)\n",
    "print(feat.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Dataloaders for famous datasets such as MNIST are provided in `qualia2.data`. One can simply use a dataset by importing the `DataLoader` for the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*] preparing data...\n",
      "[*] done.\n"
     ]
    }
   ],
   "source": [
    "from qualia2.data import MNIST\n",
    "\n",
    "data = MNIST()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 100 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div id='vision'/>\n",
    "\n",
    "## Qualia2 Vision"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Qalia2 vision provides some pretrained models for computer vision tasks. Following models are available with pretrained weights now:\n",
    "\n",
    "\n",
    "* AlexNet\n",
    "* VGG\n",
    "* ResNet\n",
    "* SqueezeNet\n",
    "* DenseNet\n",
    "* OpenPose"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "import qualia2.vision as qualiavision"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To load the model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = qualiavision.VGG11(pretrained=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The model structure can be printed by `repr`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "VGG(\n",
       "    [0] features: Sequential(\n",
       "    [0] 0: Conv2d(3, 64, (3, 3), stride=(1, 1), padding=(1, 1), dilation=(1, 1), bias=True) at 0x00007F3768736C88\n",
       "    [1] 1: ReLU() at 0x00007F37687364E0\n",
       "    [2] 2: MaxPool2d((2, 2), stride=(2, 2), padding=(0, 0), dilation=(1, 1), return_indices=False) at 0x00007F3768736BE0\n",
       "    [3] 3: Conv2d(64, 128, (3, 3), stride=(1, 1), padding=(1, 1), dilation=(1, 1), bias=True) at 0x00007F3768736E80\n",
       "    [4] 4: ReLU() at 0x00007F3768736828\n",
       "    [5] 5: MaxPool2d((2, 2), stride=(2, 2), padding=(0, 0), dilation=(1, 1), return_indices=False) at 0x00007F3768736160\n",
       "    [6] 6: Conv2d(128, 256, (3, 3), stride=(1, 1), padding=(1, 1), dilation=(1, 1), bias=True) at 0x00007F3768736E48\n",
       "    [7] 7: ReLU() at 0x00007F37687366A0\n",
       "    [8] 8: Conv2d(256, 256, (3, 3), stride=(1, 1), padding=(1, 1), dilation=(1, 1), bias=True) at 0x00007F37687368D0\n",
       "    [9] 9: ReLU() at 0x00007F3768736940\n",
       "    [10] 10: MaxPool2d((2, 2), stride=(2, 2), padding=(0, 0), dilation=(1, 1), return_indices=False) at 0x00007F37687362E8\n",
       "    [11] 11: Conv2d(256, 512, (3, 3), stride=(1, 1), padding=(1, 1), dilation=(1, 1), bias=True) at 0x00007F3768736588\n",
       "    [12] 12: ReLU() at 0x00007F3768736240\n",
       "    [13] 13: Conv2d(512, 512, (3, 3), stride=(1, 1), padding=(1, 1), dilation=(1, 1), bias=True) at 0x00007F37687365C0\n",
       "    [14] 14: ReLU() at 0x00007F3768736630\n",
       "    [15] 15: MaxPool2d((2, 2), stride=(2, 2), padding=(0, 0), dilation=(1, 1), return_indices=False) at 0x00007F37687365F8\n",
       "    [16] 16: Conv2d(512, 512, (3, 3), stride=(1, 1), padding=(1, 1), dilation=(1, 1), bias=True) at 0x00007F3768736358\n",
       "    [17] 17: ReLU() at 0x00007F3768736400\n",
       "    [18] 18: Conv2d(512, 512, (3, 3), stride=(1, 1), padding=(1, 1), dilation=(1, 1), bias=True) at 0x00007F3768736048\n",
       "    [19] 19: ReLU() at 0x00007F3768756630\n",
       "    [20] 20: MaxPool2d((2, 2), stride=(2, 2), padding=(0, 0), dilation=(1, 1), return_indices=False) at 0x00007F3768756400\n",
       ") at 0x00007F3768736B70\n",
       "\n",
       "    [1] classifier: Sequential(\n",
       "    [0] 0: Linear(25088, 4096, bias=True) at 0x00007F3768756438\n",
       "    [1] 1: ReLU() at 0x00007F37687561D0\n",
       "    [2] 2: Dropout(p=0.5) at 0x00007F3768756898\n",
       "    [3] 3: Linear(4096, 4096, bias=True) at 0x00007F3768756518\n",
       "    [4] 4: ReLU() at 0x00007F3768756940\n",
       "    [5] 5: Dropout(p=0.5) at 0x00007F3768756A58\n",
       "    [6] 6: Linear(4096, 1000, bias=True) at 0x00007F37687569B0\n",
       ") at 0x00007F3768756B00\n",
       "\n",
       ") at 0x00007F37687564E0"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
